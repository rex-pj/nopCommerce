@model HeaderLinksModel
@using Nop.Core.Domain.Customers
@inject Nop.Core.IWebHelper webHelper

<div class="header-links">
    <ul class="nav nav-pills text-end">
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.HeaderLinksBefore })
        @if (Model.ShoppingCartEnabled)
        {
            <li class="nav-item ms-2" id="topcartlink">
                <a href="@Url.RouteUrl("ShoppingCart")" class="ico-cart nav-link" title="@T("ShoppingCart.HeaderQuantity", Model.ShoppingCartItems)">
                    <span class="cart-icon" title="@T("ShoppingCart")">
                        <i class="fa fa-shopping-bag"></i>
                    </span>
                    <span class="cart-qty">@Model.ShoppingCartItems</span>
                </a>
            </li>
        }
        @if (Model.IsAuthenticated)
        {
            <li class="nav-item ms-2">
                <a href="@Url.RouteUrl("CustomerInfo")" class="ico-account nav-link" title="@Model.CustomerName">
                    <i class="fa fa-user"></i>
                </a>
            </li>
            <li class="nav-item  ms-2">
                <a href="@Url.RouteUrl("Logout")" class="ico-logout nav-link" title="@T("Account.Logout")">
                    <i class="fa fa-sign-out-alt"></i>
                </a>
            </li>
        }
        else
        {
            var returnUrl = Context.Request.Query.TryGetValue("returnUrl", out var url) && !StringValues.IsNullOrEmpty(url)
                ? url.ToString()
                : webHelper.GetRawUrl(Context.Request);

            @if (Model.RegistrationType != UserRegistrationType.Disabled)
            {
                <li class="nav-item"><a href="@Url.RouteUrl("Register", new { returnUrl })" class="ico-register nav-link">@T("Account.Register")</a></li>
            }
            <li class="nav-item"><a href="@Url.RouteUrl("Login", new { returnUrl })" class="ico-login nav-link">@T("Account.Login")</a></li>
        }
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.HeaderLinksAfter })
    </ul>
    @if (Model.AllowPrivateMessages && !string.IsNullOrEmpty(Model.AlertMessage))
    {
        //new private message notification
        <script asp-location="Footer">
            $(document).ready(function () {
                displayPopupNotification('@Html.Raw(JavaScriptEncoder.Default.Encode(Model.AlertMessage))', 'success', false);
            });
        </script>
    }
    @if (Model.ShoppingCartEnabled)
    {
        <script asp-location="Footer">
            $(document).ready(function () {
                $('.header').on('mouseenter', '#topcartlink', function () {
                    $('#flyout-cart').addClass('active');
                });
                $('.header').on('mouseleave', '#topcartlink', function () {
                    $('#flyout-cart').removeClass('active');
                });
                $('.header').on('mouseenter', '#flyout-cart', function () {
                    $('#flyout-cart').addClass('active');
                });
                $('.header').on('mouseleave', '#flyout-cart', function () {
                    $('#flyout-cart').removeClass('active');
                });
            });
        </script>
    }
</div>
